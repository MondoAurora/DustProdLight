/*
 * dpl_impl_json.h
 *
 *  Created on: Feb 24, 2020
 *      Author: Lorand Kedves
 */

#include <iostream>
#include <fstream>

#include "dpl_impl_json.h"


const DPLEntity JsonMeta::DPLJsonUnit = DPLData::getMetaEntity(DPLUnitModel::TypeUnit, "TempJson");
const DPLEntity JsonMeta::DPLJsonTemp = DPLData::getMetaEntity(DPLUnitIdea::TypeType, "TempJson", JsonMeta::DPLJsonUnit);

const DPLEntity JsonMeta::DPLJsonCtxJson = DPLData::getMetaEntity(DPL_TOKEN_ACTION, "CtxJson", JsonMeta::DPLJsonTemp);

const DPLEntity JsonMeta::DPLJsonMainRep = DPLData::getMetaEntity(DPL_TOKEN_ACTION, "MainRep", JsonMeta::DPLJsonTemp);
const DPLEntity JsonMeta::DPLJsonMainSeq = DPLData::getMetaEntity(DPL_TOKEN_ACTION, "MainSeq", JsonMeta::DPLJsonTemp);
const DPLEntity JsonMeta::DPLJsonCharSrc = DPLData::getMetaEntity(DPL_TOKEN_ACTION, "CharSrc", JsonMeta::DPLJsonTemp);

const DPLEntity JsonMeta::DPLJsonValue = DPLData::getMetaEntity(DPL_TOKEN_ACTION, "JsonValue", JsonMeta::DPLJsonTemp);

using namespace JsonMeta;


//void DPLUActionStreamReader::dplInit(DPLProcessState *pState) {
//	DPLUProcCtxJson* pCtx = (DPLUProcCtxJson*) pState->getContext(DPLJsonCtxJson);
//
//	if ( !inStream.is_open() ) {
//		inStream.open(pCtx->fName);
//	}
//}

DPLProcessResult DPLUActionStreamReader::dplProcess(DPLProcessState *pState) {
	DPLUProcCtxJson* pCtx = (DPLUProcCtxJson*) pState->getContext(DPLJsonCtxJson);

	if ( !inStream.is_open() ) {
		inStream.open(pCtx->fName);
		pCtx->pos = 0;
	}

	inStream.get(pCtx->c);
	pCtx->charRead = inStream.good();

	if ( pCtx->charRead ) {
		++pCtx->pos;
	} else {
		inStream.close();
	}


	return DPL_PROCESS_SUCCESS;
}

//void DPLUActionStreamReader::dplRelease(DPLProcessState *pState) {
//	if ( inStream.is_open() ) {
//		inStream.close();
//	}
//}

DPLProcessResult DPLUActionDump::dplProcess(DPLProcessState *pState) {
	DPLUProcCtxJson* pCtx = (DPLUProcCtxJson*) pState->getContext(DPLJsonCtxJson);

	if (pCtx->charRead) {
		cout << pCtx->c;
		return DPL_PROCESS_SUCCESS;
	} else {
		return DPL_PROCESS_REJECT;
	}
}

DPLJsonReader::~DPLJsonReader() {

}

int DPLJsonReader::getStartNode() {
	return DPLJsonMainRep;
}

DPLJsonLogicProvider* DPLJsonLogicProvider::logicProvider = NULL;

void DPLJsonLogicProvider::init() {
	if (!logicProvider) {
		logicProvider = new DPLJsonLogicProvider();
		DPLMain::registerLogicProvider(logicProvider, DPLJsonCtxJson, DPLJsonCharSrc, DPLJsonValue, DPL_ENTITY_INVALID);
	}
}

void DPLJsonLogicProvider::release() {
	if (!logicProvider) {
		delete logicProvider;
		logicProvider = NULL;
	}
}

DPLJsonLogicProvider::~DPLJsonLogicProvider() {

}

void* DPLJsonLogicProvider::createLogic(int logicId) {
	if (DPLJsonCtxJson == logicId) {
		return new DPLUProcCtxJson();
	} else if ( DPLJsonCharSrc == logicId) {
		return new DPLUActionStreamReader();
	}	else if ( DPLJsonValue == logicId ) {
		return new DPLUActionDump();
	}

	return NULL;
}

void DPLJsonLogicProvider::releaseLogic(int logicId, void* pLogic) {
	if (DPLJsonCtxJson == logicId) {
		delete (DPLUProcCtxJson*) pLogic;
	} else if ( DPLJsonCharSrc == logicId) {
		delete (DPLUActionStreamReader*) pLogic;
	}	else if ( DPLJsonValue == logicId ) {
		delete (DPLUActionDump*) pLogic;
	}
}

DPLJsonReader jsonReader;

