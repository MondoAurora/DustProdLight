/*
 * dpl_impl_store.cpp
 *
 *	Implementation of the Store and the DPL static API
 *
 *  Created on: Feb 12, 2020
 *      Author: Lorand Kedves
 */
#include <iostream>

#include "data.h"
#include "../dpl_impl.h"

void DustProdLightStore::createBootEntity(DPLEntity entity, const char* name, DPLEntity primaryType, DPLEntity owner,
		int hint) {
	DustProdLightEntity *pe = &dataLocal[entity];

	pe->store = DPL_MBI_STORE_SOURCE;
	pe->localId = entity;

	switch (primaryType) {
	case DPL_ENTITY_INVALID:
		pe->tokenType = DPL_ENTITY_INVALID;
		break;
	case DPL_MBI_TYPE_MODEL_STORE:
		pe->tokenType = DPL_TOKEN_STORE;
		break;
	case DPL_MBI_TYPE_MODEL_UNIT:
		pe->tokenType = DPLUnitModel::TypeUnit;
		break;
	case DPL_MBI_TYPE_IDEA_TYPE:
		pe->tokenType = DPLUnitIdea::TypeType;
		break;
	case DPL_MBI_TYPE_IDEA_ATTRIBUTE:
	case DPL_MBI_TYPE_IDEA_REFERENCE:
		pe->tokenType = (DPLTokenType) hint;
		break;
	default:
		pe->tokenType = DPL_TOKEN_ENTITY;
		break;
	}

	pe->primaryType = primaryType;
	pe->types.insert(primaryType);

	string globalId = getMetaEntityId(pe->tokenType, name, owner);
	dataGlobal[globalId] = entity;

//	pe->values[DPL_MBI_ATT_ENTITY_GLOBALID].valStr = globalId;
	pe->values[DPL_MBI_ATT_ENTITY_GLOBALID].set(DPL_TOKEN_VAL_STRING, &globalId);

}

string DustProdLightStore::getMetaEntityId(DPLTokenType tokenType, string name, DPLEntity parent) {
	switch (tokenType) {
	case DPL_ENTITY_INVALID:
		return name;
	case DPL_TOKEN_STORE:
		return name + DPL_SEP_STORE;
	case DPLUnitModel::TypeUnit:
		return dataLocal[DPL_MBI_STORE_SOURCE].values[DPL_MBI_ATT_ENTITY_GLOBALID].valStr + DPL_SEP_STORE + name;
	default:
		return parent ? dataLocal[parent].values[DPL_MBI_ATT_ENTITY_GLOBALID].valStr + DPL_SEP_ID + name : name;
	}

	return name;
}

//using namespace DplMetaCore;

DustProdLightStore* DustProdLightStore::store = NULL;

DustProdLightStore::DustProdLightStore() {
	nextEntityId = DPL_MBI_;

	createBootEntity(DPL_ENTITY_INVALID, "!!INVALID!!", DPL_ENTITY_INVALID);

	createBootEntity(DPL_MBI_STORE_SOURCE, "Source", DPL_MBI_TYPE_MODEL_STORE);

	createBootEntity(DPL_MBI_UNIT_TOOLS, "Tools", DPL_MBI_TYPE_MODEL_UNIT);
	createBootEntity(DPL_MBI_UNIT_MODEL, "Model", DPL_MBI_TYPE_MODEL_UNIT);
	createBootEntity(DPL_MBI_UNIT_IDEA, "Idea", DPL_MBI_TYPE_MODEL_UNIT);
	createBootEntity(DPL_MBI_UNIT_NARRATIVE, "Narrative", DPL_MBI_TYPE_MODEL_UNIT);
	createBootEntity(DPL_MBI_UNIT_DIALOG, "Dialog", DPL_MBI_TYPE_MODEL_UNIT);

	createBootEntity(DPL_MBI_TYPE_MODEL_STORE, "Store", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_MODEL);
	createBootEntity(DPL_MBI_TYPE_MODEL_UNIT, "Unit", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_MODEL);
	createBootEntity(DPL_MBI_TYPE_MODEL_ENTITY, "Entity", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_MODEL);

	createBootEntity(DPL_MBI_TYPE_IDEA_TYPE, "Type", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_IDEA);
	createBootEntity(DPL_MBI_TYPE_IDEA_ATTRIBUTE, "Attribute", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_IDEA);
	createBootEntity(DPL_MBI_TYPE_IDEA_REFERENCE, "Reference", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_IDEA);

	createBootEntity(DPL_MBI_TYPE_TOOLS_CONNECTED, "Connected", DPL_MBI_TYPE_IDEA_TYPE, DPL_MBI_UNIT_TOOLS);

	createBootEntity(DPL_MBI_ATT_ENTITY_GLOBALID, "GlobalId", DPL_MBI_TYPE_IDEA_ATTRIBUTE, DPL_MBI_TYPE_MODEL_ENTITY,
			DPL_TOKEN_VAL_STRING);

	createBootEntity(DPL_MBI_REF_CONNECTED_OWNER, "Owner", DPL_MBI_TYPE_IDEA_REFERENCE, DPL_MBI_TYPE_TOOLS_CONNECTED,
			DPL_TOKEN_REF_SINGLE);
	createBootEntity(DPL_MBI_REF_CONNECTED_EXTENDS, "Extends", DPL_MBI_TYPE_IDEA_REFERENCE, DPL_MBI_TYPE_TOOLS_CONNECTED,
			DPL_TOKEN_REF_SET);

	cout << "DustProdLightStore - Initialized" << endl;
}

DustProdLightStore::~DustProdLightStore() {
	cout << "DustProdLightStore - Shutdown" << endl;
}

DPLEntity DustProdLightStore::getMetaEntity(DPLTokenType tokenType, string name, DPLEntity parent) {
	string id = getMetaEntityId(tokenType, name, parent);
	int localId = dataGlobal[id];

	if (localId) {
		return localId;
	} else {
		localId = ++nextEntityId;

		dataGlobal[id] = localId;
		DustProdLightEntity *pe = &dataLocal[localId];

		pe->localId = localId;
		pe->tokenType = tokenType;

		switch (tokenType) {
		case DPL_ENTITY_INVALID:
			pe->primaryType = DPL_ENTITY_INVALID;
			break;
		case DPL_TOKEN_STORE:
			pe->primaryType = DPL_MBI_TYPE_MODEL_STORE;
			break;
		case DPLUnitModel::TypeUnit:
			pe->primaryType = DPL_MBI_TYPE_MODEL_UNIT;
			break;
		case DPLUnitIdea::TypeType:
			pe->primaryType = DPL_MBI_TYPE_IDEA_TYPE;
			break;
		case DPL_TOKEN_VAL_BOOL:
		case DPL_TOKEN_VAL_DOUBLE:
		case DPL_TOKEN_VAL_INT:
		case DPL_TOKEN_VAL_STRING:
			pe->primaryType = DPL_MBI_TYPE_IDEA_ATTRIBUTE;
			break;
		case DPL_TOKEN_REF_SINGLE:
		case DPL_TOKEN_REF_SET:
		case DPL_TOKEN_REF_ARR:
		case DPL_TOKEN_REF_MAP:
			pe->primaryType = DPL_MBI_TYPE_IDEA_REFERENCE;
			break;
		default:
			pe->primaryType = DPL_ENTITY_INVALID;
			break;
		}

		pe->types.insert(pe->primaryType);
		pe->values[DPL_MBI_ATT_ENTITY_GLOBALID].set(DPL_TOKEN_VAL_STRING, &id);
//		pe->values[DPL_MBI_ATT_ENTITY_GLOBALID].valStr = id;
	}

	return localId;
}

DustProdLightEntity *DustProdLightStore::validateGetToken(DPLEntity token, DPLTokenType tokenType) {
	DustProdLightEntity *pToken = &dataLocal[token];

	if (pToken->tokenType != tokenType) {
		throw DPLError(DPL_ERR_UNSPECIFIED);
	}

	return pToken;
}

DustProdLightValue *DustProdLightStore::getValue(DPLEntity entity, DPLTokenType tokenType, DPLEntity token) {
	store->validateGetToken(token, tokenType);
	DustProdLightEntity *pEntity = &store->dataLocal[entity];
	return (pEntity->values.end() == pEntity->values.find(token)) ? 0 : &pEntity->values[token];
}

void DustProdLightStore::setValue(DPLEntity entity, DPLEntity token, DPLTokenType tokenType, void* pVal) {
	validateGetToken(token, tokenType);
	DustProdLightEntity *pEntity = &store->dataLocal[entity];
	pEntity->values[token].set(tokenType, pVal);
}

bool DustProdLightStore::chgRef(DPLChange chg, DPLEntity entity, DPLEntity token, DPLEntity target, int key) {
	bool ret = false;

	DustProdLightEntity *pEntity = &dataLocal[entity];
	DustProdLightRef *pRef = pEntity->refs[token];

	if (pRef) {
		if (!pRef->getBy(target, key)) {
			new DustProdLightRef(pRef, target, key);
		}
	} else {
		DustProdLightEntity *pToken = &dataLocal[token];
		pEntity->refs[token] = new DustProdLightRef(pToken, entity, target, key);
	}

	return ret;
}

DustProdLightRef* DustProdLightStore::getRef(DPLEntity entity, DPLEntity token) {
	DustProdLightEntity *pEntity = &store->dataLocal[entity];
	DustProdLightRef *pRef = pEntity->refs[token];

	return pRef;
}

DustProdLightEntity *DustProdLightStore::createEntity(DPLEntity primaryType) {
	DPLEntity ret = nextEntityId;
	DustProdLightEntity *pEntity = &dataLocal[nextEntityId++];
	pEntity->localId = ret;
	pEntity->primaryType = primaryType;
	pEntity->tokenType = DPL_TOKEN_ENTITY;
	return pEntity;
}

DustProdLightEntity* DustProdLightStore::getEntity(DPLEntity entity) {
	return &store->dataLocal[entity];
}

void DustProdLightStore::init() {
	if ( !DustProdLightStore::store) {
		DustProdLightStore::store = new DustProdLightStore();
	}
}
void DustProdLightStore::release() {
	if ( DustProdLightStore::store) {
		delete DustProdLightStore::store;
		DustProdLightStore::store = NULL;
	}
}

/******************************************************
 *
 * Implementing DPL functions with DustProdLightStore
 *
 ******************************************************/
